function each(collection, callback){
    // if collection being passed is an array
    if(Array.isArray(collection)){
        for(var i = 0 ; i < collection.length; i ++){
            callback(collection[i])   
        }
        //else its an object
    } else { 
        for(var prop in collection){
            callback(collection[prop])   
        }
    }
}

function map(collection, callback){
    var newArray = []
    each(collection, function(element){
        newArray.push(callback(element))
    })
    return newArray
}


map([1, 2, 3], function(num){ return num * 3; });
//=> [3, 6, 9]
map({one: 1, two: 2, three: 3}, function(num, key){ return num * 3; });
//=> [3, 6, 9]

function filter(collection, test){
    var newArray = []
    each(collection, function(element){
        if(test(element)){
            newArray.push(element)
        }
    })
    return newArray
}
filter([1, 2, 3, 4, 5, 6], function(num){ return num % 2 === 0; });
//=> [2, 4, 6]

function reduce(collection, callback,accumulator){
    each(collection, function(element){
        accumulator = callback(accumulator, element)
    })
    return accumulator
}
reduce([1, 2, 3], function(memo, num){ return memo + num; },0);
//=> 6

function reduceRight(collection, callback, accumulator){
    each(collection, function(element){
        accumulator = callback(element, accumulator)
    })
    return accumulator
}
var list = [[0, 1], [2, 3], [4, 5]];
reduceRight(list, function(a, b) { return a.concat(b); }, []);
//=> [4, 5, 2, 3, 0, 1]

function equals(object1, object2){
    for(var prop in object1){
        if (!(prop in object2)){
                return false
         }
        if(object1[prop]!=object2[prop]){
            return false
        }
        }
        return true
   }
   
function where(array, object){
    var newArray = []
    each(array, function(element){
        if(equals(object, element)){
            newArray.push(element)
        }  
    })
    return newArray
}

var listOfPlays = [
    {title: "Cymbeline", author:"Shakespeare", year:1611},
    {title: "The Tempest", author:"Shakespeare", year:1611},
    {title: "Blah", author:"lol", year: 1555}]

where(listOfPlays, {author: "Shakespeare", year: 1611});
//=> [{title: "Cymbeline", author: "Shakespeare", year: 1611},
//    {title: "The Tempest", author: "Shakespeare", year: 1611}]

//use equals function which determines if one object contains the same key/values as another.
function findWhere(array, callback){
    var newArray = []
    each(array, function(element){
        if(equals(callback, element)){
           newArray.push(element)
        }
    })
    return newArray[0]
}

var publicServicePulitzers = [{newsroom: "The New York Times"},
                                {newsroom: "hi"},
                                {hello:"The New York Times"},
                                {heyo:"gay", newsroom: "The New York Times"}]
findWhere(publicServicePulitzers, {newsroom: "The New York Times"})

// => if you take out the [0] it'll return both with newrooms. but findwhere only wants first

function contains(array, value){
    var trueOrFalse = false
    each(array, function(element){
        if(element == value){
            trueOrFalse = true
        }
    })
    return trueOrFalse
}

contains([1, 2, 3], 3)
// true

function pluck(object, key){
    var newArray = []
    each(object, function(element){
        newArray.push(element[key])
    })
    return newArray
}
var stooges = [{name: 'moe', age: 40}, {name: 'larry', age: 50}, {name: 'curly', age: 60}];
pluck(stooges, 'name');
