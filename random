var myArray = [1,2,3,4,5] 
var myObject = {
    firstName: "AT",
    lastName: "Tran",
    location: "San Francisco"
}
function each(collection, callback){
    // if collection being passed is an array
    if(Array.isArray(collection)){
        for(var i = 0 ; i < collection.length; i ++){
            callback(collection[i])   
        }
        //else its an object
    } else { 
        for(var prop in collection){
            callback(collection[prop])   
        }
    }
}
each(myArray, console.log)
// logs each number in array, also works for objects

function map(collection, callback){
    var newArray = []
    if(Array.isArray(collection)){
        for( var i = 0 ; i < collection.length; i ++){
            newArray.push(callback(collection[i]))
        }
    } else {
        for(var prop in collection){
            newArray.push(callback(collection[prop], prop))
        }
    }
    return newArray
}
map([1, 2, 3], function(num){ return num * 3; });
//=> [3, 6, 9]
map({one: 1, two: 2, three: 3}, function(num, key){ return num * 3; });
//=> [3, 6, 9]



function reduce(array, callback, accumulator){
    // if the accumulator isnt provided, the sum is the first value in the array
    // then also start the loop at iteration 1 and NOT 0!
    if(accumulator == null){
        var sum = array[0]
        for(var i = 1 ; i < array.length; i ++){
        sum = callback(sum, array[i])
    }
    return sum
    // if the accumulator is provided, then sum is equal to accumulator
    } else {
     var sum = accumulator
     for(var i = 0 ; i < array.length; i ++){
        sum = callback(sum, array[i])
    }
    return sum
    }
}

reduce([1, 2, 3], function(memo, num){ return memo + num;});
//=> 6


function reduceRight(list, callback){
    var newArray = []
    for(var i = list.length -1 ; i>=0; i--){
         newArray = callback(newArray, list[i])   
    }
    return newArray
}
var list = [[0, 1], [2, 3], [4, 5]];
reduceRight(list, function(a, b) { return a.concat(b); }, []);
//=> [4, 5, 2, 3, 0, 1]

function find(array, callback){
    for ( var i = 0 ; i < array.length; i++){
        if(callback(array[i]))
        return array[i]
    }
}
find([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });
//=> 2

function filter(array, callback){
    var newArray = []
    for(var i = 0 ; i < array.length; i++){
        if(callback(array[i])){
         newArray.push(array[i])   
        }
    }
    return newArray
}
filter([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });
//=> [2, 4, 6]

var listOfPlays = [
    { title: "blah", author: "fake", year: 1222},
    { title: "Cymbleline", author: "Shakespeare", year: 1611},
    { title: "The Tempest", author: "Shakespeare", year: 1611}
    ]
function equals(object1, object2){
for(var prop in object1){
    if (!(prop in object2)){
        return false
        }
    if(!(object1[prop]==object2[prop])){
        return false
        }
    return true
    }
}
function where(list, object){
    var newArray = []
    for(var i = 0 ; i < list.length; i++){
        if(equals(object, list[i])){
            newArray.push(list[i])
        }
    }
    return newArray
}

where(listOfPlays, {author: "Shakespeare", year: 1611});
//=> [{title: "Cymbeline", author: "Shakespeare", year: 1611},
//   {title: "The Tempest", author: "Shakespeare", year: 1611}]

function reject(array, callback){
    var newArray = []
    for (var i = 0 ; i < array.length; i++){
    if(!callback(array[i]))
    newArray.push(array[i])
    }
    return newArray
}
reject([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });
//=> [1, 3, 5]

function every(list, test){
    for(var i = 0;i < list.length; i++){
        if(!(test(list[i]))){
            return false
        }   
    }
    return true
}
every([NaN, NaN, NaN], isNaN)
// true

function contains(array, number){
    for(var i = 0 ; i < array.length; i ++){
        if (array.indexOf(number) != -1){
            return true
        }
    }
    return false
}

function pluck(list, propertyName){
    var newArray = []
    for(var i = 0 ; i < list.length; i++){
        var eachObject = list[i]
        newArray.push(eachObject[propertyName])
    }
    return newArray 
}

var stooges = [{name: 'moe', age: 40}, 
               {name: 'larry', age: 50}, 
               {name: 'curly', age: 60}];
pluck(stooges, 'name');
//=> ["moe", "larry", "curly"]

function max(list, callback){
    var maxAge = null
    var maxAgeObject = null
    for(var i = 0 ; i < list.length; i++){
        if(callback(list[i]) > maxAge){
            maxAge = callback(list[i])
            maxAgeObject = list[i]
        }
    }
    return maxAgeObject
}
var stooges = [{name: 'moe', age: 40}, 
               {name: 'larry', age: 50}, 
               {name: 'curly', age: 60}];
max(stooges, function(stooge){ return stooge.age; });
//=> {name: 'curly', age: 60};

function min(array){
    var minimum = array[0]
    for(var i = 0 ; i< array.length; i++){
        if(array[i] < minimum)
        minimum = array[i]
    }
    return minimum
}
var numbers = [10, 5, 100, 2, 1000];
min(numbers);
//=> 2

function sortBy(list , callback) {
    if(typeof(callback)== "function"){
        return list.sort(function(a,b){return callback(a) - callback(b)});
    } else {
        return list.sort(function(a,b){return a[callback] > b[callback]});
    }
}

sortBy([1, 2, 3, 4, 5, 6], function(num){ return Math.sin(num); });
//=> [5, 4, 6, 3, 1, 2]
var stooges = [{name: 'moe', age: 40}, 
               {name: 'larry', age: 50}, 
               {name: 'curly', age: 60}];
sortBy(stooges, 'name');
//=> [{name: 'curly', age: 60}, {name: 'larry', age: 50}, {name: 'moe', age: 40}];




function groupBy(array, callback){
    var newObject = {};
    if(typeof(callback) == "function") {
        for(var i = 0 ; i < array.length; i++){
            groupName = callback(array[i]);
            if(groupName in newObject){
          newObject[groupName].push(array[i]);   
          } else {
            newObject[groupName] = [array[i]];
          }   
        }
  } else {
  //figure out how to pass a string as a method
        for(var j = 0 ; j < array.length; j++){
            
        }
    }
    return newObject;
}
//groupBy_.groupBy(list, iteratee, [context]) 
//Splits a collection into sets, grouped by the result of running each value through iteratee. If iteratee is a string instead of a function, groups by the property named by iteratee on each of the values.

groupBy([1.3, 2.1, 2.4], function(num){ return Math.floor(num); });
//=> {1: [1.3], 2: [2.1, 2.4]}

//groupBy(['one', 'two', 'three'], 'length');
//=> {3: ["one", "two"], 5: ["three"]}

//indexBy ONLY Works when you know the property names
// are unique (so you dont need an object with array of objects as values)
function indexBy(list, property){
    var newObject = {}
    for(var i = 0 ; i < list.length; i ++){
        var currentObject = list[i]
        newObject[currentObject[property]] = currentObject
    }
    return newObject
}
var stooges = [{name: 'moe', age: 40}, 
               {name: 'larry', age: 50}, 
               {name: 'curly', age: 60}];
indexBy(stooges, 'age');
//=> {
  //"40": {name: 'moe', age: 40},
  //"50": {name: 'larry', age: 50},
  //"60": {name: 'curly', age: 60}
//}


function countBy(array, callback) {
    var newObject = {}
    var countTrue = 0 
    var countFalse = 0
    for(var i = 0 ; i < array.length; i++){
        if(callback(array[i]) in newObject){
            newObject[callback(array[i])] +=1;
        } else {
            newObject[callback(array[i])] = 1;
        }
    }
    return newObject
}
// ? means if true --> value if true : value if false
countBy([1, 2, 3, 4, 5], function(num) {
  return num % 2 === 0 ? 'even': 'odd';
});
//=> {odd: 3, even: 2}


function isOdd(number){
    return number % 2
}
function partition(array, predicate){
    var firstArray = []
    var secondArray = []
    var finalArray = []
    for(var i = 0 ; i < array.length; i++){
     if(predicate(array[i])){
         firstArray.push(array[i])
    } else { 
        secondArray.push(array[i]) 
        }  
    }
    finalArray[0] = firstArray
    finalArray[1]= secondArray
    return finalArray
}
//partition_.partition(array, predicate) 
//Split array into two arrays: one whose elements all satisfy //predicate and one whose elements all do not satisfy predicate

partition([0, 1, 2, 3, 4, 5], isOdd);
//=> [[1, 3, 5], [0, 2, 4]]

function pairs(object){
    var newArray = []
    var randomArray = []
    for(var prop in object){
     randomArray = [prop, object[prop]]
        newArray.push(randomArray)
    }
    return newArray
}
pairs({one: 1, two: 2, three: 3});
//=> [["one", 1], ["two", 2], ["three", 3]]

